#!/usr/bin/env zsh

# Last Branch (lbranch) - Git branch history utility
# Usage: lbranch [count] [-c|--choose]

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print error messages
print_error() {
    echo "${RED}Error: $1${NC}" >&2
    exit 1
}

# Check if git is installed
if ! command -v git >/dev/null 2>&1; then
    print_error "git command not found. Please install git first."
fi

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    print_error "Not a git repository. Please run this command from within a git repository."
fi

# Check if the repository has any commits
if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
    echo "${BLUE}No branch history found - repository has no commits yet${NC}"
    exit 0
fi

# Parse arguments
branch_count=5
choose_mode=false

for arg in "$@"; do
    case $arg in
        -c|--choose)
            choose_mode=true
            ;;
        *)
            if [[ $arg =~ ^[0-9]+$ ]]; then
                branch_count=$arg
            else
                print_error "Invalid argument: $arg"
            fi
            ;;
    esac
done

# Get current branch name
current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD)

# Get unique branch history (from branches instead of to branches)
branches=()
while IFS= read -r branch; do
    # Skip empty lines and remove leading/trailing whitespace
    [[ -z "${branch// }" ]] && continue
    
    # Skip the current branch
    [[ "$branch" == "$current_branch" ]] && continue
    
    # Only add branch if it's not already in the array
    if [[ ! " ${branches[@]} " =~ " ${branch} " ]]; then
        branches+=("$branch")
    fi
done < <(git reflog | grep -i 'checkout: moving from' | awk '{for(i=1;i<=NF;i++) if($i=="from") print $(i+1)}' | grep -v '^{' | head -n 100)

# Limit to requested number of branches
total_branches=${#branches[@]}
if (( total_branches == 0 )); then
    echo "${BLUE}Last $branch_count branches:${NC}"
    exit
fi

# Display branches
echo "${BLUE}Last $branch_count branches:${NC}"
for ((i = 1; i <= total_branches; i++)); do
    echo "$((i))) ${branches[$i]}"
done

# Handle choose mode
if $choose_mode; then
    echo "\n${GREEN}Enter branch number to checkout (1-$branch_count):${NC}"
    read "branch_num?"
    
    if [[ ! $branch_num =~ ^[0-9]+$ ]] || (( branch_num < 1 )) || (( branch_num > branch_count )); then
        print_error "Invalid selection: $branch_num"
    fi
    
    selected_branch=${branches[$branch_num-1]}
    echo "\nChecking out: $selected_branch"
    
    # Attempt to checkout the branch
    if ! output=$(git checkout "$selected_branch" 2>&1); then
        print_error "Failed to checkout branch:\n$output"
    fi
    
    echo "${GREEN}Successfully checked out $selected_branch${NC}"
fi
