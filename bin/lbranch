#!/usr/bin/env python3

import sys
import subprocess
import re
from typing import List, Optional

# ANSI color codes
BLUE = '\033[0;34m'
GREEN = '\033[0;32m'
RED = '\033[0;31m'
NC = '\033[0m'  # No Color

def print_error(message: str) -> None:
    """Print error message in red and exit"""
    print(f"{RED}Error: {message}{NC}", file=sys.stderr)
    sys.exit(1)

def check_git_available() -> None:
    """Check if git is installed and we're in a git repository"""
    try:
        subprocess.run(['git', '--version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print_error("git command not found. Please install git first.")

    try:
        subprocess.run(['git', 'rev-parse', '--is-inside-work-tree'], 
                      capture_output=True, check=True)
    except subprocess.CalledProcessError:
        print_error("Not a git repository. Please run this command from within a git repository.")

def get_branch_history() -> List[str]:
    """Get unique branch history from git reflog"""
    result = subprocess.run(
        ['git', 'reflog'], 
        capture_output=True, 
        text=True, 
        check=True
    )
    
    branches = []
    seen = set()
    
    # Look for lines with "checkout: moving from X to Y"
    for line in result.stdout.splitlines():
        if 'checkout: moving from' in line:
            # Get the branch name after "to"
            parts = line.split()
            try:
                to_index = parts.index('to')
                branch = parts[to_index + 1]
                if branch != 'HEAD' and branch not in seen:
                    branches.append(branch)
                    seen.add(branch)
            except (ValueError, IndexError):
                continue
                
    return branches

def checkout_branch(branch: str) -> None:
    """Checkout specified branch"""
    try:
        subprocess.run(['git', 'checkout', branch], 
                      capture_output=True, 
                      text=True, 
                      check=True)
        print(f"{GREEN}Successfully checked out {branch}{NC}")
    except subprocess.CalledProcessError as e:
        print_error(f"Failed to checkout branch:\n{e.stderr}")

def main() -> None:
    # Parse arguments
    branch_count = 5
    choose_mode = False
    
    args = sys.argv[1:]
    while args:
        arg = args.pop(0)
        if arg in ['-c', '--choose']:
            choose_mode = True
        elif arg.isdigit() and int(arg) > 0:
            branch_count = int(arg)
        else:
            print_error(f"Invalid argument: {arg}")
    
    # Check git availability
    check_git_available()
    
    # Get branch history
    branches = get_branch_history()
    
    if not branches:
        print_error("No branch history found")
    
    # Limit to requested number of branches
    branch_count = min(branch_count, len(branches))
    
    # Display branches
    print(f"{BLUE}Last {branch_count} branches:{NC}")
    for i, branch in enumerate(branches[:branch_count], 1):
        print(f"{i}) {branch}")
    
    # Handle choose mode
    if choose_mode:
        try:
            print(f"\n{GREEN}Enter branch number to checkout (1-{branch_count}):{NC}")
            selection = input()
            if not selection.isdigit() or not 1 <= int(selection) <= branch_count:
                print_error("Invalid selection")
            
            selected_branch = branches[int(selection) - 1]
            print(f"\nChecking out: {selected_branch}")
            checkout_branch(selected_branch)
            
        except (EOFError, KeyboardInterrupt):
            print("\nOperation cancelled")
            sys.exit(1)

if __name__ == '__main__':
    main()